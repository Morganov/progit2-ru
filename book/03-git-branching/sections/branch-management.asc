[[r_branch_management]]
=== Управление ветками

(((branches, managing)))
Теперь, когда вы уже попробовали создавать, объединять и удалять ветки, пора познакомиться с некоторыми инструментами для управления ветками, которые вам пригодятся, когда вы начнёте использовать ветки постоянно.

Команда `git branch` делает несколько больше, чем просто создаёт и удаляет ветки.(((git commands, branch)))
При запуске без параметров, вы получите простой список имеющихся у вас веток:

[source,console]
----
$ git branch
  iss53
* master
  testing
----

Обратите внимание на символ `*`, стоящий перед веткой `master`: он указывает на ветку, на которой вы находитесь в настоящий момент (т.е. ветку, на которую указывает `HEAD`).
Это означает, что если вы сейчас сделаете коммит, ветка `master` переместится вперёд в соответствии с вашими последними изменениями.
Чтобы посмотреть последний коммит в каждой из веток, выполните команду `git branch -v`:

[source,console]
----
$ git branch -v
  iss53   93b412c Fix javascript issue
* master  7a98805 Merge branch 'iss53'
  testing 782fd34 Add scott to the author list in the readme
----

Опции `--merged` и `--no-merged` могут отфильтровать этот список для вывода только тех веток, которые слиты или ещё не слиты в текущую ветку.
Чтобы посмотреть список веток, которые вы уже слили с текущей, можете выполнить команду `git branch --merged`:

[source,console]
----
$ git branch --merged
  iss53
* master
----

Ветка `iss53` присутствует в этом списке потому что вы ранее слили её в `master`.
Те ветки из этого списка, перед которыми нет символа `*`, можно смело удалять командой `git branch -d`; наработки из этих веток уже включены в другую ветку, так что ничего не потеряется.

Чтобы посмотреть список веток, содержащих наработки, которые вы пока ещё не слили в текущую ветку, выполните команду `git branch --no-merged`:

[source,console]
----
$ git branch --no-merged
  testing
----

Вы увидите оставшуюся ветку.
Так как она содержит ещё не слитые наработки, попытка удалить её командой `git branch -d` приведёт к ошибке:

[source,console]
----
$ git branch -d testing
error: The branch 'testing' is not fully merged.
If you are sure you want to delete it, run 'git branch -D testing'.
----

Если вы действительно хотите удалить ветку вместе со всеми наработками, используйте опцию `-D`, как указано в подсказке.

[TIP]
====
Если в качестве аргумента не указан коммит или ветка, то опции `--merged` и `--no-merged` покажут что уже слито или не слито с вашей _текущей_ веткой соответственно.

Вы всегда можете указать дополнительный аргумент для вывода той же информации, но относительно указанной ветки, предварительно не извлекая и не переходя на неё.

[source,console]
----
$ git checkout testing
$ git branch --no-merged master
  topicA
  featureB
----
====

==== Переименование ветки

[CAUTION]
====
Не переименовывайте ветки, которые могут использоваться другими участниками проекта.
Не переименовывайте ветки с именами master/main/mainline не ознакомившись с разделом "Переименование ветки master".
====

Suppose you have a branch that is called _bad-branch-name_ and you want to change it to _corrected-branch-name_, while keeping all history.
You also want to change the branch name on the remote (GitHub, GitLab, other server).
How do you do this?

Rename the branch locally with the `git branch --move` command:

[source, console]
----
$ git branch --move bad-branch-name corrected-branch-name
----

This replaces your bad-branch-name with corrected-branch-name, but this change is only local for now.
To let others see the corrected branch on the remote, push it:

[source,console]
----
$ git push --set-upstream origin corrected-branch-name
----

Now we'll take a brief look at where we are now:

[source, console]
----
$ git branch --all
* corrected-branch-name
  main
  remotes/origin/bad-branch-name
  remotes/origin/corrected-branch-name
  remotes/origin/main
----

Notice that you're on the branch corrected-branch-name.
The corrected branch is available on the remote.
However the bad branch is also still present on the remote.
You can delete the bad branch from the remote:

[source,console]
----
$ git push origin --delete bad-branch-name
----

Now the bad branch name is fully replaced with the corrected branch name.

===== Переименование ветки master

[WARNING]
====
Changing the name of a branch like master/main/mainline/default will break the integrations, services, helper utilities and build/release scripts that your repository uses.
Before you do this, make sure you consult with your collaborators.
Also make sure you do a thorough search through your repo and update any references to the old branch name in your code or scripts.
====

Rename your local _master_ branch into _main_ with the following command

[source,console]
----
$ git branch --move master main
----

There's no _master_ branch locally anymore, because it's renamed to the _main_ branch.

To let others see the new _main_ branch, you need to push it to the remote.
This makes the renamed branch available on the remote.

[source,console]
----
$ git push --set-upstream origin main
----

Now we end up with the following state:

[source,console]
----
git branch --all
* main
  remotes/origin/HEAD -> origin/master
  remotes/origin/main
  remotes/origin/master
----

Your local _master_ branch is gone, as it's replaced with the _main_ branch.
The _main_ branch is also available on the remote.
But the remote still has a _master_ branch.
Other collaborators will continue to use the _master_ branch as the base of their work, until you make some further changes.

Now you have a few more tasks in front of you to complete the transition:

* Any projects that depend on this one will need to update their code and/or configuration.
* Update any test-runner configuration files.
* Adjust build and release scripts.
* Redirect settings on your repo host for things like thee repo's default branch, merge rules, and other things that match branch names.
* Update references to the old branch in documentation.
* Close or merge any pull requests that target the old branch.

After you've done all these tasks, and are certain the main branch performs just as the _master_ branch, you can delete the _master_ branch:

[source, console]
----
$ git push origin --delete master
----